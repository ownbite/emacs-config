#+TITLE: Emacs configuration

* Disable startup message

#+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (require 'subr-x)
#+END_SRC

* Package manager

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;; (package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

;; The try package makes it possible to try out a package before installining it permanently
(use-package try
  :ensure t)
#+END_SRC

* Personal preferences
** Sound

    #+BEGIN_SRC emacs-lisp
	(setq ring-bell-function 'ignore)
    #+END_SRC

** UI

    #+BEGIN_SRC emacs-lisp
    (unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
	(package-install (elt (cdr (assoc 'org package-archive-contents)) 0)))
    (require 'org)

    (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

** Reveal - A tool for making presentations

   #+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
	:load-path "./manually-installed-packages/org-reveal"
	:config
	(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
	(setq org-reveal-title-slide nil))
   #+END_SRC

* Development
** Vim
*** Evil mode
   
    #+BEGIN_SRC emacs-lisp
    (use-package evil
	:ensure t
	:config
	(global-set-key (kbd "<f7>") 'evil-mode)
	(evil-mode))
    #+END_SRC

** Relative numbers

   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :config
       (linum-on))
   #+END_SRC

* Virtual environments
** Virtualenvwrapper

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell)
    (setq venv-location "~/.virtualenvs"))
#+END_SRC

* Utility 
** Insert code block

#+BEGIN_SRC emacs-lisp
(defun org-insert-src-block (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive
   (let ((src-code-types
          '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
            "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
            "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
            "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
            "scheme" "sqlite")))
     (list (ido-completing-read "Source code type: " src-code-types))))
  (progn
    (newline-and-indent)
    (insert (format "#+BEGIN_SRC %s\n" src-code-type))
    (newline-and-indent)
    (insert "#+END_SRC\n")
    (previous-line 2)
    (org-edit-src-code)))
#+END_SRC

** Switch window
   
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer
          switch-window-increase 4
          switch-window-threshold 2
          switch-window-shortcut-style 'qwerty
          switch-window-qwerty-shortcuts
	            '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
	  :ensure t 
	  :config
	  (which-key-mode))
#+END_SRC

** Restart Emacs

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs 
	  :ensure t
	  :init
	  (setq restart-emacs-restore-frames t))
#+END_SRC

** Cursour follows when splitting a window
After you split a window, your focus remains in the previous one. This annoyed me so much I wrote these two, they take care of it.

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Spelling
** Turn on flyspell for all org file
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC
** Give examples of words on spelling error
#+BEGIN_SRC emacs-lisp
(define-key ctl-x-map "\C-i"
  #'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev
            (if p local-abbrev-table global-abbrev-table)
            bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))

(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
#+END_SRC
** Configure to get synonyms

#+BEGIN_SRC emacs-lisp
(use-package synosaurus
	:ensure t)

(require 'bind-key)
(bind-key* "C-c C-s l" 'synosaurus-lookup)
(bind-key* "C-c C-s r" 'synosaurus-choose-and-replace)
#+END_SRC

* Keyboard mapping
** Set command key as meta key

#+BEGIN_SRC emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)
#+END_SRC

** Shortcut for opening config

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x e") (lambda() (interactive)(find-file "~/.emacs.d/configuration.org")))
#+END_SRC

* Custom variables


#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (which-key try use-package helm helm-ebdb))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC


